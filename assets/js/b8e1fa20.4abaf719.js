"use strict";(self.webpackChunkplatform_docs=self.webpackChunkplatform_docs||[]).push([[3409],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=o,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(m,i(i({ref:t},s),{},{components:n})):a.createElement(m,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1959:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={},p={unversionedId:"authentication/playtix-connect",id:"authentication/playtix-connect",isDocsHomePage:!1,title:"PlayTiX Connect",description:"As of now, the PlayTiX Developer Portal is not available. If you want to integrate your app please contact us beforehand.",source:"@site/docs/authentication/playtix-connect.md",sourceDirName:"authentication",slug:"/authentication/playtix-connect",permalink:"/platform-docs/docs/authentication/playtix-connect",editUrl:"https://github.com/jwa-lab/platform-docs/docs/docs/authentication/playtix-connect.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tezos",permalink:"/platform-docs/docs/tokenization/tezos"},next:{title:"Overview",permalink:"/platform-docs/docs/commands/commands"}},u=[{value:"Okta",id:"okta",children:[]},{value:"OAuth 2.0 &amp; OpenID Connect",id:"oauth-20--openid-connect",children:[{value:"Authorization Code flow",id:"authorization-code-flow",children:[]},{value:"Tokens",id:"tokens",children:[]}]},{value:"Workflow",id:"workflow",children:[{value:"Requirements",id:"requirements",children:[]},{value:"Get the tokens",id:"get-the-tokens",children:[]},{value:"What to do the tokens ?",id:"what-to-do-the-tokens-",children:[]}]}],s={toc:u};function c(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As of now, the PlayTiX Developer Portal is not available. If you want to integrate your app please contact us beforehand.")),(0,r.kt)("p",null,"PlatyTiX Connect is an Identity Provider that allows your apps to connect with all the players\nfrom the PlayTiX Platform."),(0,r.kt)("p",null,"Technically, it is a standard OpenID Connect (OIDC) Provider supporting the Authorization Code flow\n(with or without PKCE)."),(0,r.kt)("p",null,"Many open-source implementations of OIDC clients are available in many languages, so you probably don't\nhave to write everything yourself."),(0,r.kt)("h2",{id:"okta"},"Okta"),(0,r.kt)("p",null,"Behind the scene, PlayTix Connect relies on Okta, a world leading Identity Provider, to ensure a maximum\nlevel of security and compliance with the latest standards.  "),(0,r.kt)("p",null,"As a PlayTiX Connect customer, we provide you a fully configured and secured environment for your application.",(0,r.kt)("br",{parentName:"p"}),"\n","You can find all the required information in the PlayTiX Developer Portal."),(0,r.kt)("h2",{id:"oauth-20--openid-connect"},"OAuth 2.0 & OpenID Connect"),(0,r.kt)("p",null,"OAuth 2.0 is a standard authorization protocol enhanced by OpenID Connect for authentication."),(0,r.kt)("h3",{id:"authorization-code-flow"},"Authorization Code flow"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow")," allows a ",(0,r.kt)("em",{parentName:"p"},"Client")," application (your game) to get the authorization from a\n",(0,r.kt)("em",{parentName:"p"},"Resource Owner")," (a player from the PlayTiX community) to access a ",(0,r.kt)("em",{parentName:"p"},"Resource Server")," (the PlayTiX API) on its behalf."),(0,r.kt)("h4",{id:"pkce"},"PKCE"),(0,r.kt)("p",null,"If your application is running on the backend and can securely store and use a secret key, then you can use the\ndefault ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow"),"."),(0,r.kt)("p",null,"See: ",(0,r.kt)("a",{parentName:"p",href:"https://developer.okta.com/docs/guides/implement-grant-type/authcode/main/"},"https://developer.okta.com/docs/guides/implement-grant-type/authcode/main/")),(0,r.kt)("p",null,"If your application is running on the frontend and cannot securely store and use a secret key, then you must use the\n",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow with PKCE"),"."),(0,r.kt)("p",null,"See: ",(0,r.kt)("a",{parentName:"p",href:"https://developer.okta.com/docs/guides/implement-grant-type/authcodepkce/main/"},"https://developer.okta.com/docs/guides/implement-grant-type/authcodepkce/main/")),(0,r.kt)("h3",{id:"tokens"},"Tokens"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.okta.com/docs/reference/api/oidc/#access-token"},"Access Token")," : Allows making request to the Resources Server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.okta.com/docs/reference/api/oidc/#id-token"},"ID Token"),": Additional token returned by the OpenID provider that contains information about the end user in the form of claims."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.okta.com/docs/guides/refresh-tokens/overview/"},"Refresh Token"),": Allows to get a new Access Tokens after the initial one is expired.")),(0,r.kt)("h2",{id:"workflow"},"Workflow"),(0,r.kt)("h3",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,"In the PlayTiX Developer Portal, you can find:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"your ",(0,r.kt)("inlineCode",{parentName:"li"},"client_id")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"client_secret")),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"/authorize")," endpoint"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"/token")," endpoint"),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"/userinfo")," endpoint")),(0,r.kt)("p",null,"For now, the defaults to use for the OAuth2 / OpenID endpoints are :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"authorize")," : ",(0,r.kt)("inlineCode",{parentName:"li"},"https://playtix.okta.com/oauth2/aus2dahc1hKc6YaOl5d7/v1/authorize")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"token")," : ",(0,r.kt)("inlineCode",{parentName:"li"},"https://playtix.okta.com/oauth2/aus2dahc1hKc6YaOl5d7/v1/token")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"userinfo")," (optional) : ",(0,r.kt)("inlineCode",{parentName:"li"},"https://playtix.okta.com/oauth2/aus2dahc1hKc6YaOl5d7/v1/userinfo"))),(0,r.kt)("p",null,"Please note that theses urls are default development url. If you want to use our services or if your already use them,\nthe id between ",(0,r.kt)("inlineCode",{parentName:"p"},"/oauth2/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"/v1/")," will change. Not using the right endpoint may result in service failure for your users."),(0,r.kt)("p",null,"You will also have to use mandatory scopes in order to either get the user's information, or a refresh token."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"profile")," To get the user's default profile information such as his username."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"email")," To get the user's email address."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"openid")," Which is required if you ask for the user's profile."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"offline_access")," Which is required if you want a refresh token.")),(0,r.kt)("p",null,"You also have to set up at least one ",(0,r.kt)("inlineCode",{parentName:"p"},"redirect_uri")," for your game."),(0,r.kt)("p",null,"If you run the ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow")," from your backend, the ",(0,r.kt)("inlineCode",{parentName:"p"},"redirect_uri")," looks\nlike ",(0,r.kt)("inlineCode",{parentName:"p"},"https://my.app.com/playtix-connect/auth/callback"),".  "),(0,r.kt)("p",null,"If you run the ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow with PKCE")," from your frontend, the ",(0,r.kt)("inlineCode",{parentName:"p"},"redirect_uri")," can use a custom\napp protocol like ",(0,r.kt)("inlineCode",{parentName:"p"},"myapp://")),(0,r.kt)("h4",{id:"authorization-code-flow-1"},"Authorization Code flow"),(0,r.kt)("p",null,"If you use the ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow"),", your authorize request will require the following parameters :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A valid ",(0,r.kt)("inlineCode",{parentName:"li"},"client_id"),"."),(0,r.kt)("li",{parentName:"ul"},"The required ",(0,r.kt)("inlineCode",{parentName:"li"},"scope"),"."),(0,r.kt)("li",{parentName:"ul"},"The type of response ",(0,r.kt)("inlineCode",{parentName:"li"},"response_type"),", the response type is ",(0,r.kt)("inlineCode",{parentName:"li"},"code"),"."),(0,r.kt)("li",{parentName:"ul"},"A registered ",(0,r.kt)("inlineCode",{parentName:"li"},"redirect_uri"),"."),(0,r.kt)("li",{parentName:"ul"},"A random string for the ",(0,r.kt)("inlineCode",{parentName:"li"},"state"),".")),(0,r.kt)("p",null,"In the end, your final authorize url for the ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow")," may look like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://playtix.{...}/oauth2/v1/authorize?\nclient_id=my_client_id&\nresponse_type=code&\nscope=profile%20openid%20email%20offline_access&\nredirect_uri=my_redirect_uri&\nstate=random_string\n")),(0,r.kt)("h4",{id:"authorization-code-flow-with-pkce"},"Authorization Code flow with PKCE"),(0,r.kt)("p",null,"If you use the ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow with PKCE"),", your authorize request will require the following parameters :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A valid ",(0,r.kt)("inlineCode",{parentName:"li"},"client_id"),"."),(0,r.kt)("li",{parentName:"ul"},"The required ",(0,r.kt)("inlineCode",{parentName:"li"},"scope"),"."),(0,r.kt)("li",{parentName:"ul"},"The type of response ",(0,r.kt)("inlineCode",{parentName:"li"},"response_type"),", the response type is ",(0,r.kt)("inlineCode",{parentName:"li"},"code"),"."),(0,r.kt)("li",{parentName:"ul"},"A registered ",(0,r.kt)("inlineCode",{parentName:"li"},"redirect_uri"),"."),(0,r.kt)("li",{parentName:"ul"},"A random string for the ",(0,r.kt)("inlineCode",{parentName:"li"},"state"),"."),(0,r.kt)("li",{parentName:"ul"},"The response mode ",(0,r.kt)("inlineCode",{parentName:"li"},"response_mode"),", which is how your authorization code will be sent back to your app,\nit must be set to ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," which means that the authorization code will be sent back alongside your callback url."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"code_challenge_method")," set to ",(0,r.kt)("inlineCode",{parentName:"li"},"S256"),". Which is how the code challenge will be computed. ",(0,r.kt)("inlineCode",{parentName:"li"},"S256")," means SHA256."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"code_challenge"),". We will talk about this one now.")),(0,r.kt)("h5",{id:"code-challenge--code-verifier"},"Code challenge & Code verifier"),(0,r.kt)("p",null,"In order to authorize your user without any credentials, we need a proof of authentication,\nin order to do so, we compute a hash based on a random string from the client side that we give along our ",(0,r.kt)("inlineCode",{parentName:"p"},"authorize")," url.\nWhen comes the time to exchange our authorization code for an ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token")," from our ",(0,r.kt)("inlineCode",{parentName:"p"},"/token")," endpoint, we give the original unhashed string in the request body,\nand the authorization server will compute this string and challenge it with the given one in the ",(0,r.kt)("inlineCode",{parentName:"p"},"authorize")," endpoint.\nIf it matches, we get the ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token"),", if anything goes wrong, the PKCE verification fails, and a new authorization code must be asked and exchanged."),(0,r.kt)("p",null,"To sum it up :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Code Verifier")," is the original unhashed string you generated at the very beginning. ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Must be set in the ",(0,r.kt)("inlineCode",{parentName:"li"},"/token")," body as ",(0,r.kt)("inlineCode",{parentName:"li"},"code_verifier"),"."))),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Code Challenge")," is the SHA256 and base64 url encoded string based on the original string, aka code verifier.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Must be set in the ",(0,r.kt)("inlineCode",{parentName:"li"},"/authorize")," parameters as ",(0,r.kt)("inlineCode",{parentName:"li"},"code_challenge"),". ")))),(0,r.kt)("p",null,"Don't worry for the computation, we will give you the required functions to compute your hashes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Please note that a new unique hash must be generated at each user's request. A static hash may cause security flaws for your apps.")),(0,r.kt)("h5",{id:"compute-the-code-challenge-nodejs"},"Compute the Code challenge (NodeJS)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"The code provided for this example is written in NodeJS but the concept can be applied to any language.")),(0,r.kt)("p",null,"What do we need to do ? "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Generate a random string between ",(0,r.kt)("strong",{parentName:"li"},"43")," and ",(0,r.kt)("strong",{parentName:"li"},"128")," chars, ","[A/a/0]","."),(0,r.kt)("li",{parentName:"ul"},"Create a SHA256 hash from this string."),(0,r.kt)("li",{parentName:"ul"},"Encode this hash in Base64 url-safe or URL Encoded.")),(0,r.kt)("p",null,"Let's say, our random string is, we will call it, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Code Verifier"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'// code_verifier\nconst my_random_string_verifier = "jh7divpjGX86iqMfcPFiLcAkuKUGvOQFTQhksOQAzc5"; \n')),(0,r.kt)("p",null,"We can hash our string with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"function sha256(buffer) {\n    return crypto.createHash('sha256').update(buffer).digest();\n}\n")),(0,r.kt)("p",null,"And encode our hash with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"function base64URLEncode(str) {\n    return str.toString('base64')\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=/g, '');\n}\n")),(0,r.kt)("p",null,"The computed hash, or ",(0,r.kt)("inlineCode",{parentName:"p"},"Code Challenge")," will look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var code_challenge = base64URLEncode(sha256(my_random_string_verifier));\n")),(0,r.kt)("p",null,"To put it together:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const crypto = require('crypto');\n\n/* \n * 43 chars min\n * 128 chars max\n */\nconst my_random_string_verifier = \"jh7divpjGX86iqMfcPFiLcAkuKUGvOQFTQhksOQAzc5\";\n\nfunction sha256(buffer) {\n    return crypto.createHash('sha256').update(buffer).digest();\n}\n\nfunction base64URLEncode(str) {\n    return str.toString('base64')\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=/g, '');\n}\n\nvar challenge = base64URLEncode(sha256(my_random_string_verifier));\n\nconsole.log(challenge);\n")),(0,r.kt)("h5",{id:"compute-the-code-challenge-c"},"Compute the Code challenge (C#)"),(0,r.kt)("p",null,"Here is a C# reference."),(0,r.kt)("p",null,"Details can be found above, in the NodeJS reference."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"using System;\nusing System.Text;\nusing System.Security.Cryptography;\n                    \npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(\n            Base64UrlEncode(\n                sha256_hash(\"jh7divpjGX86iqMfcPFiLcAkuKUGvOQFTQhksOQAzc5\")\n            )\n        );\n    }\n    \n    public static byte[] sha256_hash(String value) {\n        Byte[] result;\n        \n        using (SHA256 hash = SHA256Managed.Create()) {\n            Encoding enc = Encoding.UTF8;\n            result = hash.ComputeHash(enc.GetBytes(value));\n        }\n\n        return result;\n    }\n    \n    private static string Base64UrlEncode(byte[] input) {\n        // Special \"url-safe\" base64 encode.\n        return Convert.ToBase64String(input)\n          .Replace('+', '-')\n          .Replace('/', '_')\n          .Replace(\"=\", \"\");\n      }\n}\n")),(0,r.kt)("p",null,"If you need more examples, you can look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"Code Challenge")," Auth0 documentation.\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/authorization/flows/call-your-api-using-the-authorization-code-flow-with-pkce#create-code-challenge"},"https://auth0.com/docs/authorization/flows/call-your-api-using-the-authorization-code-flow-with-pkce#create-code-challenge")),(0,r.kt)("p",null,"You will find examples for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Java"),(0,r.kt)("li",{parentName:"ul"},"Javascript"),(0,r.kt)("li",{parentName:"ul"},"Swift 3"),(0,r.kt)("li",{parentName:"ul"},"Objective-C ")),(0,r.kt)("p",null,"Here is the same to generate a random ",(0,r.kt)("inlineCode",{parentName:"p"},"Code Verifier")," string:\n",(0,r.kt)("a",{parentName:"p",href:"https://auth0.com/docs/authorization/flows/call-your-api-using-the-authorization-code-flow-with-pkce#create-code-verifier"},"https://auth0.com/docs/authorization/flows/call-your-api-using-the-authorization-code-flow-with-pkce#create-code-verifier")),(0,r.kt)("h5",{id:"back-to-the-pkce-flow"},"Back to the PKCE flow"),(0,r.kt)("p",null,"In the end, your final authorize url for the ",(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow with PKCE")," may look like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://playtix.{...}/oauth2/v1/authorize?\nclient_id=my_client_id&\nresponse_type=code&\nresponse_mode=query&\nscope=profile%20openid%20email%20offline_access&\nredirect_uri=my_redirect_uri&\nstate=random_string&\ncode_challenge_method=S256&\ncode_challenge={{my_computed_code_challenge}}\n")),(0,r.kt)("p",null,"You can find a more information about the endpoints here :\n",(0,r.kt)("a",{parentName:"p",href:"https://developer.okta.com/docs/reference/api/oidc/#endpoints"},"https://developer.okta.com/docs/reference/api/oidc/#endpoints")),(0,r.kt)("h3",{id:"get-the-tokens"},"Get the tokens"),(0,r.kt)("p",null,"Generate an url to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/authorize")," endpoint (this is usually done by your OIDC client library) and open it in a\nbrowser, a ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/multidevice/android/customtabs/"},"Chrome Custom Tabs")," or\na ",(0,r.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller"},"Safari View Controller"),"."),(0,r.kt)("p",null,"The user will be prompted to log in and authorize your app to access his account. If he does he will be redirected\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"redirect_uri")," with an authorization code.",(0,r.kt)("br",{parentName:"p"}),"\n","The authorization code must be exchanged for the final tokens (this is usually done by your OIDC client library) on the ",(0,r.kt)("inlineCode",{parentName:"p"},"/token")," endpoint."),(0,r.kt)("p",null,"For instance:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST - https://playtix.okta.com/oauth2/aus2dahc1hKc6YaOl5d7/v1/token\n")),(0,r.kt)("p",null,"Payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'x-www-form-urlencoded\n\n{\n    "grant_type": "authorization_code",\n    "client_id": "{{my_app_client_id}}",\n    "client_secret": "{{my_app_client_secret}}",\n    "redirect_uri": "{{my_redirect_uri}}",\n    "code": "{{given_authorization_code}}",\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"client_id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"client_secret")," can also be given in the authorization header as ",(0,r.kt)("inlineCode",{parentName:"p"},"Basic Auth")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Authorization Code flow with PKCE")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"POST - https://playtix.okta.com/oauth2/aus2dahc1hKc6YaOl5d7/v1/token\n")),(0,r.kt)("p",null,"Payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'x-www-form-urlencoded\n\n{\n    "grant_type": "authorization_code",\n    "client_id": "{{my_app_client_id}}",\n    "redirect_uri": "{{my_redirect_uri}}",\n    "code": "{{given_authorization_code}}",\n    "code_verifier": "{{pre_generated_code_verifier}}",\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"what-to-do-the-tokens-"},"What to do the tokens ?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"Access Token")," can be used as is to send requests to the PlayTiX API, for example to assign an item instance\nto a player."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"ID Token")," can be used to get information about the player, including his ID that you will need to send requests\nto the PlayTiX API."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"Refresh Token")," can be stored to get new Access Token when the current one is expired, without the need to start\nthe ",(0,r.kt)("strong",{parentName:"li"},"Authorization Code flow")," again.")))}c.isMDXComponent=!0}}]);